# author: Martin Angelsmark
# email: martin.angelsmark@esss.se
# copyright: (C) 2017 European Spallation Source (ESS)
# version: 1.0.1
# date: 2017/JUN/30
# description: Kameleon simulator file for the TPG 300 (Total Pressure Gauge Controler)



# The terminator (EOL) of commands/statuses is described in the "TERMINATOR" variable. By default, the terminator is not defined (i.e. is empty). If defined, the terminator is inserted at the end of both the commands and statuses received/sent from/to clients before Kameleon starts to process these. The generic form of this variable is:
#
#    TERMINATOR = value
#
# Where value can either be an arbitrary string (e.g. "END") or one of the following pre-defined terminators:
#
#    LF     : the terminator is a line feed (0xA).
#    CR     : the terminator is a carriage return (0xD).
#    LF + CR: the terminator is a line feed (0xA) followed by a carriage return (0xD).
#    CR + LF: the terminator is a carriage return (0xD) followed by a line feed (0xA).
#
# In case of need to setup different terminators for commands and statuses, the "TERMINATOR_CMD" and "TERMINATOR_STS" variables can be used respectively (e.g. TERMINATOR_CMD = LF).

TERMINATOR_STS = CR + LF



# Data (i.e. commands) received from the client are described in the "COMMANDS" list. The generic form of this list is:
#
#    COMMANDS = [[description_1, command_1, status_1, wait_1], [description_2, command_2, status_2, wait_2], ..., [description_X, command_X, status_X, wait_X]]
#
# Where:
#
#    description: (mandatory) string that describes the command (e.g. "Set power on").
#    command    : (mandatory) string that represents the command (e.g. "AC1"). Only data (received from the client) that matches exactly the command is selected. Additional matching policies are available:
#                    - if command starts with "***", any data (received from the client) that ends with command is selected.
#                    - if command ends with "***", any data (received from the client) that starts with command is selected.
#                    - if command starts and ends with "***", any data (received from the client) that contains the command is selected.
#    status     : (optional) integer, list or string that specifies the index(es) of the status(es) (stored in the "STATUSES" list) to send to the client or a user-defined function (to be called by Kameleon) after the command is selected. The first status (stored in "STATUSES" list) is at index 1. If 0 or not specified, no status is sent.
#    wait       : (optional) integer that specifies the time to wait (in milliseconds) before sending the status to the client. If 0 or not specified, the status is immediately sent (i.e. right after the command is received).

COMMANDS = [["Measuring channel on/off", ["SEN***"+CR+LF, "SEN***"+CR, "SEN***"+LF], 1],
			["Pressure measuring channel A1", ["PA1"+CR+LF,"PA1"+CR,"PA1"+LF], 2],	#Need to implement measurement status
			["Pressure measuring channel A2", ["PA2"+CR+LF, "PA2"+CR, "PA2"+LF], 2],
			["Pressure measuring channel B1", ["PB1"+CR+LF, "PB1"+CR, "PB1"+LF], 2],
			["Pressure measuring channel B2", ["PB2"+CR+LF, "PB2"+CR, "PB2"+LF], 2],
			["PE underrange control", ["PUC***"+CR+LF, "PUC***"+CR, "PUC***"+LF], 3],	#Can change status but don't know what this actually does
			["Switching function 1", ["SP1***"+CR+LF, "SP1***"+CR, "SP1***"+LF], 4],	#Same here. I have not implemented what this actually does
			["Switching function 2", ["SP2***"+CR+LF, "SP2***"+CR, "SP2v"+LF], 4],
			["Switching function 3", ["SP3***"+CR+LF, "SP3***"+CR, "SP3***"+LF], 4],
			["Switching function 4", ["SP4***"+CR+LF, "SP4***"+CR, "SP4***"+LF], 4],
			["Switching function A", ["SPA***"+CR+LF, "SPA***"+CR, "SPA***"+LF], 4],
			["Switching function B", ["SPB***"+CR+LF, "SPB***"+CR, "SPB***"+LF], 4],
			["Switching function status", ["SPS"+CR+LF, "SPS"+CR, "SPS"+LF], 5],	#Implemented it turning on or off, but no effect from this
			["Unit of measurement (pressure)", ["UNI***"+CR+LF, "UNI***"+CR, "UNI***"+LF], 6],
			["Filter time constant", ["FIL***"+CR+LF, "FIL***"+CR, "FIL***"+LF], 7],	#Can change status but don't know what this actually does
			["Baudrate", ["BAU***"+CR+LF, "BAU***"+CR, "BAU***"+LF], 8],	#Can change status but don't know what this actually does
			["Save parameters", ["SAV***"+CR+LF, "SAV***"+CR, "SAV***"+LF], 9],	#Need to implement hot start
			["Code lock", ["COD***"+CR+LF, "COD***"+CR, "COD***"+LF], 10],	#You can change the code but it does not lock anything
			["Program version (firmware version", ["PNR"+CR+LF, "PNR"+CR, "PNR"+LF], 11],
			["TPG identification (plug-in boards)", ["TID"+CR+LF, "TID"+CR, "TID"+LF], 12],
			["Error status", ["ERR"+CR+LF, "ERR"+CR, "ERR"+LF], 13],
			["Enquiry", ["\x05", "\x05"+CR+LF, "\x05"+CR, "\x05"+LF], 14],	#Defined as no CR nor LF in manual but we now machine accepts LF so should accept CR as well
			["Syntax error", ["***"+CR+LF, "***"+CR, "***"+LF], 15]]






# Data (i.e. statuses) sent to the client are described in the "STATUSES" list. The generic form of this list is:
#
#    STATUSES = [[description_1, behavior_1, value_1, prefix_1, suffix_1, timeout_1], [description_2, behavior_2, value_2, prefix_2, suffix_2, timeout_2]], ..., [description_X, behavior_X, value_X, prefix_X, suffix_X, timeout_X]]
#
# Where:
#
#    description: (mandatory) string that describes the status (e.g. "Get temperature value").
#    behavior   : (mandatory) integer that specifies the behavior for generating the status. It can either be:
#                    - FIXED (sends a fixed value to the client)
#                    - ENUM (sends a value - belonging to an enumeration - to the client)
#                    - INCR (sends an incremented value to the client)
#                    - RANDOM (sends a random value to the client)
#                    - CUSTOM (sends a value from a user-defined function to the client)
#    value      : (mandatory) value to send to the client. Depending on the behavior, it can either be an integer, float, string or list:
#                    - when FIXED, the value is expected to be an integer, float or string. Independently of how many times it is sent to the client, the value remains the same (i.e. does not change).
#                    - when ENUM, the value is expected to be a list. It represents a set of elements (enumeration). After sending an element of the list to the client, the next value to be sent is the next element in the list. When the last element is sent, the next to be sent is the the first element of the list.
#                    - when INCR, the value is expected to be an integer, float or list. If an integer or float, the first value to be sent is a 0 and subsequent values to be sent are incremented by value. If a list, the lower bound, upper bound and increment values are defined by the first, second and third elements of the list, respectively.
#                    - when RANDOM, the value is expected to be an integer or a list. If an integer, a random number between 0 and value is generated. If a list, the lower and upper bounds of the random number to generate are defined by the first and second elements of the list, respectively. The generated random number is sent to the client.
#                    - when CUSTOM, the value is expected to be a string. It contains the name of a user-defined Python function to be called by Kameleon. The value returned by this function is sent to the client (if the function does not return a value or it returns None, nothing is sent).
#    prefix     : (optional) string that contains the prefix to insert at the beginning of the value to send to the client. If not specified, nothing is inserted.
#    suffix     : (optional) string that contains the suffix to insert at the end of the value to send to the client. If not specified, nothing is inserted.
#    timeout    : (optional) integer that specifies the time-out (in milliseconds) after which the status is sent to the client (i.e. time-based). If 0 or not specified, the status is only sent after receiving a command from the client (i.e. event-based).

STATUSES = [["Switching measuring circuits on/off", CUSTOM, "fcn_SEN()"],
			["Pressure measuring", CUSTOM, "fcn_P()"],
			["PE underrange control", CUSTOM, "fcn_PUC()"],
			["Switching functions", CUSTOM, "fcn_SP()"],
			["Switching function status", CUSTOM, "fcn_SPS()"],
			["Unit of measurement (pressure)", CUSTOM, "fcn_UNI()"],
			["Filter time constant", CUSTOM, "fcn_FIL()"],
			["Baudrate", CUSTOM, "fcn_BAU()"],
			["Save parameters", CUSTOM, "fcn_SAV()"],
			["Code lock", CUSTOM, "fcn_COD()"],
			["Program version (firmware version", CUSTOM, "fcn_PNR()"],
			["TPG identification (plug-in boards)", CUSTOM, "fcn_TID()"],
			["Error status", CUSTOM, "fcn_ERR()"],
			["Enquiry", CUSTOM, "fcn_ENQ()"],
			["Syntax error", CUSTOM, "Syntax_Error()"]]



# User-custom Python code

#Defaul parameters (page 74):
Circuit_Status = [2,2,2,2]	#Denotes if circuit (A1,A2,B1,B2) are on/off
Underrange_Control = 0	#Denotes if PE underrange control is on/off
Switching_Function = [0,0,0,0,0,0]	#Switching function assigment
Lower_Threshold = [1.0E-11,1.0E-11,1.0E-11,1.0E-11,6.0E-3,6.0E-3]	#Lower threshold of switching fcn
Upper_Threshold = [9.0E-11,9.0E-11,9.0E-11,9.0E-11,8.0E-3,8.0E-3]	#Upper threshold of switching fcn
Unit = 1	#Unit of measurement (mbar, Torr, Pa)
Baud_Rate = 9 	#Baud rate
Code_Lock = "000"	#The code lock
Set_Point =[0,0,0,0,0,0]	#Tells if the switching function is turned on/off caused by the lower/upper thresholds


#Parameters without default value (on page 74)
Pressure = [1.0E-11, 6.3E-4, 2.7E-1, 1.4E+3]	#The measured pressure of the circuits
Underrange = [9.0E-11, 1.0E-10, 1.0E-11, 5.0E-7]	#Assume that the lower and upper range is gauge
Overrange = [2.0E+2, 3.0E+2, 1.0E+3, 1.0E+3]		#specific. Just choose some random values.
Pressure_Status = [0, 0, 0, 0]	#What is the status of measurement
ERR = "0000"	#Error message
Filter_Time = [1,1,1,1]	#Should have a default value even if not on page 74. This is the filter time constant.
Save_Parameters = 0	#Which parameters that are saved. Obviously default saved parameters are the default parameters.
Program_Version = "BG123456"
TPG_Identification = "PI300, PE300, IF300"


#Flags
SEN_flag = 0
P_flag = [0,0,0,0]
PUC_flag = 0
SP_flag = [0,0,0,0,0,0]
SPS_flag = 0
UNI_flag = 0
FIL_flag = 0
BAU_flag = 0
SAV_flag = 0
COD_flag = 0
PNR_flag = 0
TID_flag = 0

NAK_flag = 0	#Checks if we just got negative acknowledgment


#Other variables
Circuit_Status_new = [2,2,2,2]	#To be used in fcn_SEN()
Filter_Time_new = [1,1,1,1]	#To be used in fcn_FIL()
Conversion = [1, 100, 750.062E-3]	#Change pressure dependent on unit

save_file = "tpg300_parameters.txt"	#Change to desired path

if os.path.isfile(save_file):
		with open(save_file, "r") as My_file:
			content = My_file.readlines()

		os.remove(save_file)

		#Insert saved value in correct parameter
		data = content[0].split(",")
		for index in xrange(0,4):
			Circuit_Status[index] = int(data[index])
		Underrange_Control = int(content[1])
		data = content[2].split(",")
		for index in xrange(0,6):
			Switching_Function[index] = int(data[index])
		data = content[3].split(",")
		for index in xrange(0,6):
			Lower_Threshold[index] = float(data[index])
		data = content[4].split(",")
		for index in xrange(0,6):
			Upper_Threshold[index] = float(data[index])
		Unit = int(content[5])
		Baud_Rate = int(content[6])
		Code_Lock = content[7]
		data = content[8].split(",")
		for index in xrange(0,6):
			Set_Point[index] = int(data[index])
		data = content[9].split(",")
		for index in xrange(0,4):
			Filter_Time[index] = int(data[index])

def is_number(s):
	#Fcn used to check if a character is a number

    try:
        float(s)
        return True
    except ValueError:
        return False

def reset():
	global ERR, SEN_flag, P_flag, PUC_flag, SP_flag, SPS_flag, UNI_flag, FIL_flag, BAU_flag, SAV_flag, COD_flag, PNR_flag, TID_flag, ERR_flag, NAK_flag
	#Fcn used to reset values so that correct thing is displayed once asked

	#Reset all flags:
	SEN_flag = 0
	P_flag = [0,0,0,0]
	PUC_flag = 0
	SP_flag = [0,0,0,0,0,0]
	SPS_flag = 0
	UNI_flag = 0
	FIL_flag = 0
	BAU_flag = 0
	SAV_flag = 0
	COD_flag = 0
	PNR_flag = 0
	TID_flag = 0
	ERR_flag = 0

	NAK_flag = 0

	#Reset error status:
	#ERR = "0000"	#I don't think error should be reset

def negative_acknowledgment_flag():
	global NAK_flag
	#Fcn for activating NAK_flag
	NAK_flag = 1

def fcn_SEN():
	#This is the fcn for switching on and off measuring circuits A1, A2, B1 and B2.
	#Circuits can have status:	0 –> No measuring channel
	#							1 –> Off
	#							2 –> Automatic
	#							3 –> On
	global Circuit_Status, ERR, SEN_flag

	#Reset values:
	reset()

	data = COMMAND_RECEIVED.split(",")
	command = data[0]

	element_counter = 0
	for elements in data:
		element_counter += 1

	if element_counter == 1:	#Check if parameter was given
		if command == "SEN\r\n" or  command == "SEN\r" or command == "SEN\n":	#Check for syntax error
			SEN_flag = 1	#Flag so that value can be read upon request
			return "\x06"	#Acknowledgment
	elif element_counter == 5:	#Check if correct amount of parameters was given
		if command == "SEN":
			if is_number(data[1]) and is_number(data[2]) and is_number(data[3]) and is_number(data[4]):	#Check if parameters are numbers

				ParCorr_counter = 0	#(correct paramater counter)
				for index in xrange(0,4):
					Circuit_Status_new[index] = int(data[index+1])


					if Circuit_Status_new[index] >= 0 and Circuit_Status_new[index] < 4:	#Check if correct numbers
						ParCorr_counter += 1

				if ParCorr_counter == 4:	#Check so that all statuses where in correct limit
					Circuit_Status = Circuit_Status_new

					SEN_flag = 1	#Flag so that value can be read upon request
					return "\x06"	#Acknowledgment

	if (command == "SEN\r\n" or command == "SEN\r" or command == "SEN\n") or command == "SEN":	#Check if syntax or parameter error
		ERR = "0010"	#Error code for parameter error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment
	else:
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment


def fcn_P():
	#Asks for measured value from a certain measuring circuit (A1 to B2)
	#Will return status and value after enquiry
	#Statuses:	0 –> Measurement data okay
	#			1 –> Underrange (ur)
	#			2 –> Overrange (or)
	#			3 –> Measuring circuit error
	#			4 –> Measuring circuit switched off
	#			5 –> No Hardware
	global ERR, P_flag

	#Reset values:
	reset()

	command = COMMAND_RECEIVED

	for index in xrange(0, 4):
		if Underrange[index] > Pressure[index]:	#This is static now (i.e. values does not change). But could be good if changing values was implemented.
			Pressure_Status[index] = 1
		elif Overrange[index] < Pressure[index]:
			Pressure_Status[index] = 2
		else:
			Pressure_Status[index] = 0

	if command == "PA1\r\n" or command == "PA1\r" or command == "PA1\n":
		P_flag[0] = 1
	elif command == "PA2\r\n" or command == "PA2\r" or command == "PA2\n":
		P_flag[1] = 1
	elif command == "PB1\r\n" or command == "PB1\r" or command == "PB1\n":
		P_flag[2] = 1
	elif command == "PB2\r\n" or command == "PB2\r" or command == "PB2\n":
		P_flag[3] = 1
	else:	#For safety but should be impossible to enter this statement
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment

	return "\x06"	#Acknowledgment


def fcn_PUC():
	#Switches PE underrange control on/off (0 is off, 1 is on)
	#Effect of undderrange control is not implemented, most likely not needed.
	global Underrange_Control, ERR, PUC_flag

	#Reset values:
	reset()

	data = COMMAND_RECEIVED.split(",")
	command = data[0]

	element_counter = 0
	for elements in data:
		element_counter += 1

	if element_counter == 1:	#Check if parameter was given
		if command == "PUC\r\n" or command == "PUC\r" or command == "PUC\n":	#Check for syntax error
			PUC_flag = 1	#Flag so that value can be read upon request
			return "\x06"	#Acknowledgment
	elif element_counter == 2:	#Check if correct parameter was given
		if command == "PUC":
			if is_number(data[1]):	#Check if parameter is a number

				if int(data[1]) == 0 or int(data[1]) == 1:	#Check if correct numbers
					Underrange_Control = int(data[1])

					PUC_flag = 1	#Flag so that value can be read upon request
					return "\x06"	#Acknowledgment

	if (command == "PUC\r\n" or command == "PUC\r" or command == "PUC\n") or command == "PUC":	#Check if syntax or parameter error
		ERR = "0010"	#Error code for parameter error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment
	else:
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment


def fcn_SP():
	#Changes assignments for switching functions.
	#Effect of switching functions not implemented, most likely not needed.
	#Switching functions can have assigments:	0 –> No assignment
	#											1 –> Measuring circuit A1
	#											2 –> Measuring circuit A2
	#											3 –> Measuring circuit B1
	#											4 –> Measuring circuit B1
	#											5 –> Measuring circuit A1 (for self-monitoring with start-up delay)
	#											6 –> Measuring circuit A2 (for self-monitoring with start-up delay)
	#											7 –> Measuring circuit B1 (for self-monitoring with start-up delay)
	#											8 –> Measuring circuit B1 (for self-monitoring with start-up delay)
	global Switching_Function, Lower_Threshold, Upper_Threshold, ERR, SP_flag

	#Reset values:
	reset()

	data = COMMAND_RECEIVED.split(",")
	command = data[0]

	element_counter = 0
	for elements in data:
		element_counter += 1

	if (command == "SP1\r\n" or command == "SP1\r" or command == "SP1\n") or command == "SP1":	#Check which switching fcn
		i = 0	#index
	elif (command == "SP2\r\n" or command == "SP2\r" or command == "SP2\n") or command == "SP2":
		i = 1
	elif (command == "SP3\r\n" or command == "SP3\r" or command == "SP3\n") or command == "SP3":
		i = 2
	elif (command == "SP4\r\n" or command == "SP4\r" or command == "SP4\n") or command == "SP4":
		i = 3
	elif (command == "SPA\r\n" or command == "SPA\r" or command == "SPA\n") or command == "SPA":
		i = 4
	elif (command == "SPB\r\n" or command == "SPB\r" or command == "SPB\n") or command == "SPB":
		i = 5
	else:
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment

	if element_counter == 1:	#Check if parameter was given
		SP_flag[i] = 1	#Flag so that value can be read upon request
		return "\x06"	#Acknowledgment
	elif element_counter == 4:	#Check if correct amount of parameters were given
		if is_number(data[1]) and is_number(data[2]) and is_number(data[3]):	#Check if parameters are numbers
			if (int(data[3]) >= 0 and int(data[3]) < 9) and (float(data[1]) >= 1.0E-11 and float(data[1]) <= 9.9E+3) and (float(data[2]) >= 1.0E-11 and float(data[2]) <= 9.9E+3):	#Check if correct numbers
				Switching_Function[i] = int(data[3])
				Lower_Threshold[i] = float(data[1])
				Upper_Threshold[i] = float(data[2])

				SP_flag[i] = 1	#Flag so that value can be read upon request
				return "\x06"	#Acknowledgment

	ERR = "0010"	#Error code for parameter error
	negative_acknowledgment_flag()	#Activate NAK_flag
	return "\x15"	#Negative acknowledgment


def fcn_SPS():
	#Asks for set point status for all switching functions
	#Statuses:	0 –> Off
	#			1 –> On
	global ERR, SPS_flag

	#Reset values:
	reset()

	command = COMMAND_RECEIVED

	if command == "SPS\r\n" or command == "SPS\r" or command == "SPS\n":
		SPS_flag = 1
	else:	#For safety but should be impossible to enter this statement
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment

	return "\x06"	#Acknowledgment


def fcn_UNI():
	#Changes unit of the pressure
	#Units:	1 –> mbar
	#		2 –> Torr
	#		3 –> Pa
	global Unit, ERR, UNI_flag

	#Reset values:
	reset()

	data = COMMAND_RECEIVED.split(",")
	command = data[0]

	element_counter = 0
	for elements in data:
		element_counter += 1

	if element_counter == 1:	#Check if parameter was given
		if command == "UNI\r\n" or command == "UNI\r" or command == "UNI\n":	#Check for syntax error
			UNI_flag = 1	#Flag so that value can be read upon request
			return "\x06"	#Acknowledgment
	elif element_counter == 2:	#Check if correct parameter was given
		if command == "UNI":
			if is_number(data[1]):	#Check if parameter is a number

				if int(data[1]) >= 1 and int(data[1]) < 4:	#Check if correct numbers
					Unit = int(data[1])

					UNI_flag = 1	#Flag so that value can be read upon request
					return "\x06"	#Acknowledgment

	if (command == "UNI\r\n" or command == "UNI\r" or command == "UNI\n") or command == "UNI":	#Check if syntax or parameter error
		ERR = "0010"	#Error code for parameter error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment
	else:
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment


def fcn_FIL():
	#Changes filter time constant
	#		1 –> fast = 16ms
	#		2 –> medium = 160ms
	#		3 –> slow = 1.6s
	global Filter_Time, ERR, FIL_flag

	#Reset values:
	reset()

	data = COMMAND_RECEIVED.split(",")
	command = data[0]

	element_counter = 0
	for elements in data:
		element_counter += 1

	if element_counter == 1:	#Check if parameter was given
		if command == "FIL\r\n" or command == "FIL\r" or command == "FIL\n":	#Check for syntax error
			FIL_flag = 1	#Flag so that value can be read upon request
			return "\x06"	#Acknowledgment
	elif element_counter == 5:	#Check if correct amount of parameters was given
		if command == "FIL":
			if is_number(data[1]) and is_number(data[2]) and is_number(data[3]) and is_number(data[4]):	#Check if parameters are numbers

				ParCorr_counter = 0	#(correct paramater counter)
				for index in xrange(0,4):
					Filter_Time_new[index] = int(data[index+1])


					if Filter_Time_new[index] >= 1 and Filter_Time_new[index] < 4:	#Check if correct numbers
						ParCorr_counter += 1

				if ParCorr_counter == 4:	#Check so that all statuses where in correct limit
					Filter_Time = Filter_Time_new

					FIL_flag = 1	#Flag so that value can be read upon request
					return "\x06"	#Acknowledgment

	if (command == "FIL\r\n" or command == "FIL\r" or command == "FIL\n") or command == "FIL":	#Check if syntax or parameter error
		ERR = "0010"	#Error code for parameter error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment
	else:
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment


def fcn_BAU():
	#Changes Baud rate
	#		3 –> 300 Baud
	#		1 –> 1200 Baud
	#		2 –> 2400 Baud
	#		4 –> 4800 Baud
	#		9 –> 9600 Baud
	global Baud_Rate, ERR, BAU_flag

	#Reset values:
	reset()

	data = COMMAND_RECEIVED.split(",")
	command = data[0]

	element_counter = 0
	for elements in data:
		element_counter += 1

	if element_counter == 1:	#Check if parameter was given
		if command == "BAU\r\n" or command == "BAU\r" or command == "BAU\n":	#Check for syntax error
			BAU_flag = 1	#Flag so that value can be read upon request
			return "\x06"	#Acknowledgment
	elif element_counter == 2:	#Check if correct amount of parameters was given
		if command == "BAU":
			if is_number(data[1]):	#Check if parameter is a number

				if (int(data[1]) >= 1 and int(data[1]) < 5) or int(data[1]) == 9:	#Check if correct numbers
					Baud_Rate = int(data[1])

					BAU_flag = 1	#Flag so that value can be read upon request
					return "\x06"	#Acknowledgment

	if (command == "BAU\r\n" or command == "BAU\r" or command == "BAU\n") or command == "BAU":	#Check if syntax or parameter error
		ERR = "0010"	#Error code for parameter error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment
	else:
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment


def fcn_SAV():
	#This function saves the current paramaters.
	#			0 –> Default parameters
	#			1 –> User parameters
	#			2 –> User parameters with imediate start-up (user hot start)
	#Note: No difference between normal save and hot start is implemented.
	global Save_Parameters, ERR, SAV_flag

	#Reset values:
	reset()

	data = COMMAND_RECEIVED.split(",")
	command = data[0]

	element_counter = 0
	for elements in data:
		element_counter += 1

	if element_counter == 1:	#Check if parameter was given
		if command == "SAV\r\n" or command == "SAV\r" or command == "SAV\n":	#Check for syntax error
			SAV_flag = 1	#Flag so that value can be read upon request
			return "\x06"	#Acknowledgment
	elif element_counter == 2:	#Check if correct amount of parameters was given
		if command == "SAV":
			if is_number(data[1]):	#Check if parameter is a number

				if int(data[1]) == 0:	#Check if correct numbers
					Save_Parameters = int(data[1])

					SAV_flag = 1	#Flag so that value can be read upon request
					return "\x06"	#Acknowledgment
				elif int(data[1]) == 1 or int(data[1]) == 2:	#Don't know the difference between normal and hot start
					Save_Parameters = int(data[1])

					with open(save_file, "w") as New_file:	#Save all parameters in a text document
						New_file.write(str(Circuit_Status[0])+","+str(Circuit_Status[1])+","+str(Circuit_Status[2])+","+str(Circuit_Status[3])+"\n")
						New_file.write(str(Underrange_Control)+"\n")
						New_file.write(str(Switching_Function[0])+","+str(Switching_Function[1])+","+str(Switching_Function[2])+","+str(Switching_Function[3])+","+str(Switching_Function[4])+","+str(Switching_Function[5])+"\n")
						New_file.write(str(Lower_Threshold[0])+","+str(Lower_Threshold[1])+","+str(Lower_Threshold[2])+","+str(Lower_Threshold[3])+","+str(Lower_Threshold[4])+","+str(Lower_Threshold[5])+"\n")
						New_file.write(str(Upper_Threshold[0])+","+str(Upper_Threshold[1])+","+str(Upper_Threshold[2])+","+str(Upper_Threshold[3])+","+str(Upper_Threshold[4])+","+str(Upper_Threshold[5])+"\n")
						New_file.write(str(Unit)+"\n")
						New_file.write(str(Baud_Rate)+"\n")
						New_file.write(str(Code_Lock)+"\n")
						New_file.write(str(Set_Point[0])+","+str(Set_Point[1])+","+str(Set_Point[2])+","+str(Set_Point[3])+","+str(Set_Point[4])+","+str(Set_Point[5])+"\n")
						New_file.write(str(Filter_Time[0])+","+str(Filter_Time[1])+","+str(Filter_Time[2])+","+str(Filter_Time[3])+"\n")

					SAV_flag = 1	#Flag so that value can be read upon request
					return "\x06"	#Acknowledgment

	if (command == "SAV\r\n" or command == "SAV\r" or command == "SAV\n") or command == "SAV":	#Check if syntax or parameter error
		ERR = "0010"	#Error code for parameter error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment
	else:
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment


def fcn_COD():
	#This function changes code lock.
	#Code lock does not actually lock anything at the moment.
	global Code_Lock, ERR, COD_flag

	#Reset values:
	reset()

	data = COMMAND_RECEIVED.split(",")
	command = data[0]

	element_counter = 0
	for elements in data:
		element_counter += 1

	if element_counter == 1:	#Check if parameter was given
		if command == "COD\r\n" or command == "COD\r" or command == "COD\n":	#Check for syntax error
			COD_flag = 1	#Flag so that value can be read upon request
			return "\x06"	#Acknowledgment
	elif element_counter == 2:	#Check if correct amount of parameters was given
		if command == "COD":

			character_counter = 0
			for character in data[1]:
				character_counter += 1

			if character_counter == 5 or character_counter == 6:	#Check that chorect amount of numbers where given

				if is_number(data[1]):	#Check if parameter is a number

					if int(data[1]) >= 1 and int(data[1]) < 1999:	#Check if correct numbers
						Code_Lock = data[1]	#Store as string so all information remains

						COD_flag = 1	#Flag so that value can be read upon request
						return "\x06"	#Acknowledgment

	if (command == "COD\r\n" or command == "COD\r" or command == "COD\n") or command == "COD":	#Check if syntax or parameter error
		ERR = "0010"	#Error code for parameter error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment
	else:
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment


def fcn_PNR():
	#Ask for program number
	global ERR, PNR_flag

	#Reset values:
	reset()

	command = COMMAND_RECEIVED

	if command == "PNR\r\n" or command == "PNR\r" or command == "PNR\n":
		PNR_flag = 1
	else:	#For safety but should be impossible to enter this statement
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment

	return "\x06"	#Acknowledgment


def fcn_TID():
	#TPG identification
	global ERR, TID_flag

	#Reset values:
	reset()

	command = COMMAND_RECEIVED

	if command == "TID\r\n" or command == "TID\r" or command == "TID\n":
		TID_flag = 1
	else:	#For safety but should be impossible to enter this statement
		ERR = "0001"	#Error code for syntax error
		negative_acknowledgment_flag()	#Activate NAK_flag
		return "\x15"	#Negative acknowledgment

	return "\x06"	#Acknowledgment


def fcn_ERR():
	#This gives back the error message if requested
	global ERR, ERR_flag

	ERR_flag = 1

	return "\x06"	#Acknowledgment

def Syntax_Error():
	#If you write something that is not a command
	global ERR

	ERR = "0001"
	negative_acknowledgment_flag()	#Activate NAK_flag
	return "\x15"	#Negative acknowledgment


def fcn_ENQ():
	#This return values upon your request
	global ERR, SEN_flag, P_flag, PUC_flag, SP_flag, SPS_flag, UNI_flag, FIL_flag, BAU_flag, SAV_flag, COD_flag, PNR_flag, TID_flag, ERR_flag, NAK_flag

	#Check which flag is activated:
	enter_SEN = SEN_flag
	enter_P = P_flag
	enter_PUC = PUC_flag
	enter_SP = SP_flag
	enter_SPS = SPS_flag
	enter_UNI = UNI_flag
	enter_FIL = FIL_flag
	enter_BAU = BAU_flag
	enter_SAV = SAV_flag
	enter_COD = COD_flag
	enter_PNR = PNR_flag
	enter_TID = TID_flag
	enter_ERR = ERR_flag | NAK_flag	#Both error flag or negative ackowledgment flag display error

	#Reset all flags:
	SEN_flag = 0
	P_flag = [0,0,0,0]
	PUC_flag = 0
	SP_flag = [0,0,0,0,0,0]
	SPS_flag = 0
	UNI_flag = 0
	FIL_flag = 0
	BAU_flag = 0
	SAV_flag = 0
	COD_flag = 0
	PNR_flag = 0
	TID_flag = 0
	ERR_flag = 0

	NAK_flag = 0

	if enter_SEN == 1:
		return str(Circuit_Status[0]) + "," + str(Circuit_Status[1]) + "," + str(Circuit_Status[2]) + "," + str(Circuit_Status[3])
	elif enter_P[0] == 1:
		return str(Pressure_Status[0]) + "," + str(Pressure[0] * Conversion[Unit-1])
	elif enter_P[1] == 1:
		return str(Pressure_Status[1]) + "," + str(Pressure[1] * Conversion[Unit-1])
	elif enter_P[2] == 1:
		return str(Pressure_Status[2]) + "," + str(Pressure[2] * Conversion[Unit-1])
	elif enter_P[3] == 1:
		return str(Pressure_Status[3]) + "," + str(Pressure[3] * Conversion[Unit-1])
	elif enter_PUC == 1:
		return Underrange_Control
	elif enter_SP[0] == 1:
		return str(Lower_Threshold[0] * Conversion[Unit-1]) + "," + str(Upper_Threshold[0] * Conversion[Unit-1]) + "," + str(Switching_Function[0])
	elif enter_SP[1] == 1:
		return str(Lower_Threshold[1] * Conversion[Unit-1]) + "," + str(Upper_Threshold[1] * Conversion[Unit-1]) + "," + str(Switching_Function[1])
	elif enter_SP[2] == 1:
		return str(Lower_Threshold[2] * Conversion[Unit-1]) + "," + str(Upper_Threshold[2] * Conversion[Unit-1]) + "," + str(Switching_Function[2])
	elif enter_SP[3] == 1:
		return str(Lower_Threshold[3] * Conversion[Unit-1]) + "," + str(Upper_Threshold[3] * Conversion[Unit-1]) + "," + str(Switching_Function[3])
	elif enter_SP[4] == 1:
		return str(Lower_Threshold[4] * Conversion[Unit-1]) + "," + str(Upper_Threshold[4] * Conversion[Unit-1]) + "," + str(Switching_Function[4])
	elif enter_SP[5] == 1:
		return str(Lower_Threshold[5] * Conversion[Unit-1]) + "," + str(Upper_Threshold[5] * Conversion[Unit-1]) + "," + str(Switching_Function[5])
	elif enter_SPS == 1:

		string = ""
		for index in xrange(0,6):
			if Switching_Function[index] == 1 or Switching_Function[index] == 5:
				if Pressure[0] > Upper_Threshold[index]:
					Set_Point[index] = 0	#Check if switching function is on/off
				elif Pressure[0] < Lower_Threshold[index]:
					Set_Point[index] = 1
			elif Switching_Function[index] == 2 or Switching_Function[index] == 6:
				if Pressure[1] > Upper_Threshold[index]:
					Set_Point[index] = 0	#Check if switching function is on/off
				elif Pressure[1] < Lower_Threshold[index]:
					Set_Point[index] = 1
			elif Switching_Function[index] == 3 or Switching_Function[index] == 7:
				if Pressure[2] > Upper_Threshold[index]:
					Set_Point[index] = 0	#Check if switching function is on/off
				elif Pressure[2] < Lower_Threshold[index]:
					Set_Point[index] = 1
			elif Switching_Function[index] == 4 or Switching_Function[index] == 8:
				if Pressure[3] > Upper_Threshold[index]:
					Set_Point[index] = 0	#Check if switching function is on/off
				elif Pressure[3] < Lower_Threshold[index]:
					Set_Point[index] = 1
			else:
				Set_Point[index] = 0

			if index < 5:
				string = string + str(Set_Point[index]) + ","
			else:
				string = string + str(Set_Point[index])

		return string

	elif enter_UNI == 1:
		return Unit
	elif enter_FIL == 1:
		return str(Filter_Time[0]) + "," + str(Filter_Time[1]) + "," + str(Filter_Time[2]) + "," + str(Filter_Time[3])
	elif enter_BAU == 1:
		return Baud_Rate
	elif enter_SAV == 1:
		return Save_Parameters
	elif enter_COD == 1:
		return Code_Lock
	elif enter_PNR == 1:
		return Program_Version
	elif enter_TID == 1:
		return TPG_Identification
	elif enter_ERR == 1:
		ERR_old = ERR
		ERR = "0000"
		return ERR_old
