# -*- mode: python -*-
#
# author      : Jeong Han Lee
# email       : jeonghan.lee@gmail.com
#
# copyright   : (C) 2016 European Spallation Source (ESS)
#               (C) 2016 Jeong Han Lee
#
# version     : 0.0.5
#
# date        : Tuesday, November 29 18:40:37 CET 2016
#
# description : Kameleon simulator file for Danfysik System 8500

# import datetime
import ctypes

# _QUIET = True
# need to

# The real HW uses only CR, however, if we want to make this simulator
# works with telnet, we should use CR + LF, because the telnet sends <CR><LF>
# we use the CR + LF in the EPICS IOC st.cmd works with the simulator, and
# we will use CR in the EPICS IOC st.cmd works with a real HW.

#TERMINATOR_CMD = CR
# CR, "\r" , 13 or 0x0D.
# LF, "\n" , 0x0a"
TERMINATOR_CMD = CR + LF
TERMINATOR_STS = LF + CR


# Data (i.e. commands) received from the client are described in the "COMMANDS" list.
# The generic form of this list is: [description_1, command_1, status_1, wait_1]

COMMANDS = [["CLOCK read"     ,"CLOCK***"     , 1],
            ["CMD read"       ,"CMD"          , 2],
            ["LOC"            ,"LOC"          , 3],
            ["REM"            ,"REM"          , 4],
            ["RLOCK"          ,"RLOCK"        , 5],
            ["BIT"            ,"BIT"          , 6],
            ["SETBIT"         ,"SETBIT***"    , 7],
            ["S1H"            ,"S1H"          , 8],
            ["ID"             ,"ID"           , 9],
            ["PRINT"          ,"PRINT"        ,10],
            ["VER"            ,"VER"          ,11],
            ["Pwr off"        ,"F"            ,12],
            ["Pwr on"         ,"N"            ,13],
            ["Reset"          ,"RS"           ,14]]



#[description_1, behavior_1, value_1, prefix_1, suffix_1, timeout_1]
STATUSES = [["CLOCK read"      ,CUSTOM  ,"clock_read()"                    ,"" ,""],
            ["CMD set"         ,CUSTOM  ,"get_status_line_in_cmd()"        ,"" ,""],
            ["LOC set"         ,CUSTOM  ,"set_status_line_in_cmd(\"LOC\")" ,"" ,""],
            ["REM set"         ,CUSTOM  ,"set_status_line_in_cmd(\"REM\")" ,"" ,""],
            ["RLOCK"           ,CUSTOM  ,"set_rem_lock_state()"            ,"" ,""],
            ["BIT"             ,CUSTOM  ,"print_bit()"                     ,"" ,""],
            ["SETBIT"          ,CUSTOM  ,"set_bit()"                       ,"" ,""],
            ["S1H"             ,CUSTOM  ,"get_S1H()"                       ,"" ,""],
            ["ID"              ,CUSTOM  ,"get_ID()"                        ,"" ,""],
            ["PRINT"           ,CUSTOM  ,"get_PRINT()"                     ,"" ,""],
            ["VER"             ,CUSTOM  ,"get_VER()"                       ,"" ,""],
            ["F"               ,CUSTOM  ,"set_off()"                       ,"" ,""],
            ["N"               ,CUSTOM  ,"set_on()"                        ,"" ,""],
            ["RS"              ,CUSTOM  ,"set_reset()"                     ,"" ,""]]

# retruns
# hour,min,sec,day,month,year'lf''cr'
# OR
# SYNTAX ERROR / ILLEGAL COMMAND 
# If auto-answer mode is set (FRom SW version SCS110)
answer='OK'
internal_clock = ""
status_line_in_cmd = "REM"
rem_lock_state = False
# page 20
identification="SYSTEM 8500 TYP 859H\n1250A / 400V\nSW VER WCC114\nID 1234567890"
# page 27
powersupply_type="SYSTEM 8500\n\rV1.0A"
# Page 47
version="Copyright DANFYSIK A/S\n\rRAMTEX Engineering Aps\n\rSCC V1.13 Aug 10 2008"
# # . and 0 : False
# # ! and 1 : True

c_uint = ctypes.c_uint

# With LittleEndianStructure
# 0x000001 > Spare 1
# 0x800000 > main_power_off  1 

class Status_bits( ctypes.LittleEndianStructure ):
        
        _fields_ = [
                
                ("spare",                 c_uint, 1 ),  #0000 0000 0000 0000 0000 0001 
                ("ps_not_ready",          c_uint, 1 ),  #0000 0000 0000 0000 0000 0010
                ("magnet_overtemp",       c_uint, 1 ),  #0000 0000 0000 0000 0000 0100    
                ("magnet_waterflow_fail", c_uint, 1 ),  #0000 0000 0000 0000 0000 1000  # 0x00000F  
                
                ("paincbtn_doorswitch",   c_uint, 1 ),  #0000 0000 0000 0000 0001 0000 
                ("ps_overtemp",           c_uint, 1 ),  #0000 0000 0000 0000 0010 0000  
                ("therm_breaker_fuse",    c_uint, 1 ),  #0000 0000 0000 0000 0100 0000
                ("earth_leakage_fail",    c_uint, 1 ),  #0000 0000 0000 0000 1000 0000  # 0x0000F0

                ("ps_waterflow_fail",     c_uint, 1 ),  #0000 0000 0000 0001 0000 0000
                ("phase_fail",            c_uint, 1 ),  #0000 0000 0000 0010 0000 0000
                ("pre_reg_fail",          c_uint, 1 ),  #0000 0000 0000 0100 0000 0000
                ("reg_module_fail",       c_uint, 1 ),  #0000 0000 0000 1000 0000 0000 # 0x000F00

                ("dc_overload",           c_uint, 1 ),  #0000 0000 0001 0000 0000 0000
                ("dc_overcurrent",        c_uint, 1 ),  #0000 0000 0010 0000 0000 0000
                ("sum_interlock",         c_uint, 1 ),  #0000 0000 0100 0000 0000 0000 
                ("atransistor_fault",     c_uint, 1 ),  #0000 0000 1000 0000 0000 0000 # 0x00F000

                ("spare_interlock",       c_uint, 1 ),  #0000 0001 0000 0000 0000 0000
                ("unit",                  c_uint, 1 ),  #0000 0010 0000 0000 0000 0000
                ("dac17_status",          c_uint, 1 ),  #0000 0100 0000 0000 0000 0000
                ("dac16_status",          c_uint, 1 ),  #0000 1000 0000 0000 0000 0000 # 0x0F0000

                ("reg_transformer",       c_uint, 1 ),  #0001 0000 0000 0000 0000 0000 # 0x100000
                ("polarity_reversed",     c_uint, 1 ),  #0010 0000 0000 0000 0000 0000 # 0x200000 
                ("polarity_normal",       c_uint, 1 ),  #0100 0000 0000 0000 0000 0000 # 0x400000 # 0x600000
                ("main_power_off",        c_uint, 1 )   #1000 0000 0000 0000 0000 0000 # 0x800000
        ]

class Status( ctypes.Union ):
        _anonymous_ = ("bit",)
        _fields_ = [
                ("bit", Status_bits ),
                ("u",   c_uint    )
        ]
        
Status1 = Status()
# Define the initial power supply status
Status1.main_power_off=1
Status1.polarity_normal=1
Status1.polarity_reversed=0
Status1.reg_transformer=0

Status1.dac16_status=0   
Status1.dac17_status=0          
Status1.unit=1
Status1.spare_interlock=0

Status1.atransistor_fault=0
Status1.sum_interlock=0
Status1.dc_overcurrent=0
Status1.dc_overload=0

Status1.reg_module_fail=0
Status1.pre_reg_fail=0
Status1.phase_fail=0
Status1.ps_waterflow_fail=0

Status1.earth_leakage_fail=0
Status1.therm_breaker_fuse=0
Status1.ps_overtemp=1
Status1.paincbtn_doorswitch=0

Status1.magnet_waterflow_fail=0
Status1.magnet_overtemp=0
Status1.ps_not_ready=1
Status1.spare=0

# REMOTE : line-in-commnad : remote
# LOCAL  : line-in-command : local, the command is given from the remote line

def clock_read():
        _now = datetime.datetime.now()
        internal_clock  = str(_now.hour);
        internal_clock += ",";
        internal_clock += str(_now.minute);
        internal_clock += ",";
        internal_clock += str(_now.second);
        internal_clock += ","
        internal_clock += str(_now.day);
        internal_clock += ","
        internal_clock += str(_now.month);
        internal_clock += ","
        internal_clock += str(_now.year);
      
        return internal_clock


def get_status_line_in_cmd():
	return "%s" %(status_line_in_cmd)

def set_status_line_in_cmd( arg ):
        global status_line_in_cmd
        global rem_lock_state
        
        status_line_in_cmd = arg

        # REM or LOC commands off RLOCK
        if status_line_in_cmd == "LOC" or status_line_in_cmd == "REM" :
                rem_lock_state = False
 
        return "%s" %(answer)

def set_rem_lock_state ():
        global rem_lock_state
        return_cmd = ""
        if rem_lock_state == True:
                return_cmd = "COMMAND ALREADY ACTIVE"
        else :
                if status_line_in_cmd == "REM":
                        rem_lock_state = True
                        # If auto-answer mode is set (FRom SW version SCS110)
                        return_cmd = answerOK
                else: # for this simulator, this state is LOC
                        return_cmd = "ILLEGAL COMMAND"

        return "%s" %(return_cmd)


def print_bit():
        
        global Status1
        print " #[bt] Desc                status"
        print "---------------------------------"
        print " 1[23] Main Power Off      %s" %(Status1.main_power_off)
        print " 2[22] Polarity Normal     %s" %(Status1.polarity_normal)       
        print " 3[21] Polarity Reversed   %s" %(Status1.polarity_reversed)
        print " 4[20] Reg transformer     %s" %(Status1.reg_transformer)       
        print " 5[19] DAC16               %s" %(Status1.dac16_status)          
        print " 6[18] DAC17               %s" %(Status1.dac17_status)          
        print " 7[17] Unit                %s" %(Status1.unit)                  
        print " 8[16] Spare Interlock     %s" %(Status1.spare_interlock)
        print " 9[15] A Transistor Fault  %s" %(Status1.atransistor_fault)
        print "10[14] Sum Interlock       %s" %(Status1.sum_interlock)
        print "11[13] DC overcurrent      %s" %(Status1.dc_overcurrent)
        print "12[12] DC overload         %s" %(Status1.dc_overload)
        print "13[11] Reg Module Failure  %s" %(Status1.reg_module_fail)
        print "14[10] Pre Reg Failure     %s" %(Status1.pre_reg_fail)
        print "15[09] Phase Failure       %s" %(Status1.phase_fail)
        
        print "16[08] PS Waterflow Fail   %s" %(Status1.ps_waterflow_fail)
        print "17[07] Earth Leakage Fail  %s" %(Status1.earth_leakage_fail)
        print "18[06] ThermBreaker Fail   %s" %(Status1.therm_breaker_fuse)
        print "19[05] PS Overtemperature  %s" %(Status1.ps_overtemp)
        print "20[04] PanicBtnDoorSwitch  %s" %(Status1.paincbtn_doorswitch)
        print "21[03] Mgt Waterflow fail  %s" %(Status1.magnet_waterflow_fail)
        print "22[02] Mgt Overtemperature %s" %(Status1.magnet_overtemp)
        print "23[01] PS Not Ready        %s" %(Status1.ps_not_ready)
        print "24[00] SPARE               %s" %(Status1.spare)
        
        print "-----"
        print Status1.u
        
def set_bit():
        # COMMAND_RECEIVED has "all string command with all args"
        args = COMMAND_RECEIVED.split()
        
        Status1.u = int(args[1], 16)

        return "%s" %hex(Status1.u)
   
        
def get_S1H():
        return  '%x' %(Status1.u)


def get_ID():
        return '%s' %(identification)

def get_PRINT():
        return '%s' %(powersupply_type)

def get_VER():
        return '%s' %(version)



def set_on():
        init="0x400000"
        Status1.u = int(init, 16)
        # If auto-answer mode is set (FRom SW version SCS110)
        return answer

# Page 18, F

# If OFF and RESET commands both are set to clear non active interlocks, it also
# clear these interlocks

# So, here what non active interlocks and these interlocks are...

def set_off():
        init="0xc00002"
        Status1.u = int(init, 16)
        # If auto-answer mode is set (FRom SW version SCS110)
        return answer

#
# Still, unclear what is "all non-pending interlocks"
# Page 30/ Page 18 
def set_reset():
        Status1.spare_interlock=0
        Status1.atransistor_fault=0
        Status1.sum_interlock=0
        Status1.dc_overcurrent=0
        Status1.dc_overload=0
        
        Status1.reg_module_fail=0
        Status1.pre_reg_fail=0
        Status1.phase_fail=0
        Status1.ps_waterflow_fail=0
        
        Status1.earth_leakage_fail=0
        Status1.therm_breaker_fuse=0
        Status1.ps_overtemp=0
        Status1.paincbtn_doorswitch=0
        
        Status1.magnet_waterflow_fail=0
        Status1.magnet_overtemp=0
        # If auto-answer mode is set (FRom SW version SCS110)
        return answer
