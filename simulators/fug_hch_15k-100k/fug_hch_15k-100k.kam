# -*- mode: python -*-
# vi: set ft=python :

# author:      Nicolas Senaud (nicolas.senaud@cea.fr)
# copyright:   (C) 2016 European Spallation Source (ESS); (C) 2016 Commissariat a l'Energie Atomique (CEA)
# license:     LGPL3
# version:     1.0.0
# date:        2016/MAR/23
# description: Kameleon simulator file for FUG HCH 15000-100000 power supply.

# The terminator (EOL) of commands/statuses is described in the "TERMINATOR" variable. By default, the terminator is
# empty. If defined, the terminator is inserted at the end of the commands/statuses received/sent from/to clients
# before Kameleon starts to process these. The generic form of this variable is:
#
#    TERMINATOR = value
#
# Where value can either be an arbitrary string (e.g. "END") or one of the following pre-defined terminators:
#
#    LF     : the terminator is a line feed (0xA).
#    CR     : the terminator is a carriage return (0xD).
#    LF + CR: the terminator is a line feed (0xA) followed by a carriage return (0xD).
#    CR + LF: the terminator is a carriage return (0xD) followed by a line feed (0xA).
TERMINATOR_CMD = CR + LF
TERMINATOR_STS = LF

# Data (i.e. commands) received from the client are described in the "COMMANDS" list. The generic form of this list is:
#
#    COMMANDS = [[description_1, command_1, status_1, wait_1], [description_2, command_2, status_2, wait_2], ...,
#                [description_X, command_X, status_X, wait_X]]
#
# Where:
#
#    description: (mandatory) string that describes the command (e.g. "Turn power on").
#    command    : (mandatory) string that represents the command (e.g. "AC1"). Only data (received from the client)
#                 that matches exactly the command is selected. Additional matching policies are available:
#                    - if command starts with "***", then any data (received from the client) that ends with command is
#                      selected.
#                    - if command ends with "***", then any data (received from the client) that starts with command is
#                      selected.
#                    - if command starts and ends with "***", then any data (received from the client) that contains
#                      the command is selected.
#    status     : (optional) integer that specifies the index of the status (stored in the "STATUSES" list) to send to
#                 the client after the command is selected. The first status in the list is at index 1. If set to 0 or
#                 not specified, then no status is sent.
#    wait       : (optional) integer that specifies the time to wait (in milliseconds) before sending the status to the
#                 client. If set to 0 or not specified, then the status is immediately sent (i.e. right after the
#                 command is received).
COMMANDS = [["Reset", "=", 1]
           ,["Set power off", "F0", 2]
           ,["Set power on", "F1", 3]
           ,["Get power status", ">BON?", 4]
           ,["Get current", ">S1?", 5]
           ,["Measure current", ">M1?", 6]
           ,["Set current", ">S1 ***", 7]
           ,["Get voltage", ">S0?", 8]
           ,["Measure voltage", ">M0?", 9]
           ,["Set voltage", ">S0 ***", 10]
           ,["Get serial number", "*IDN?", 11]
           ,["Set ramp status", ">S0B ***", 12]
           ,["Get ramp", ">S0S?", 13]
           ,["Set ramp value", ">S0R ***", 14]
           ,["Get statusbyte", ">KS?", 15]
           ]

# Data (i.e. statuses) sent to the client are described in the "STATUSES" list. The generic form of this list is:
#
#    STATUSES = [[description_1, behavior_1, value_1, prefix_1, suffix_1, timeout_1], [description_2, behavior_2,
#                 value_2, prefix_2, suffix_2, timeout_2]], ..., [description_X, behavior_X, value_X, prefix_X,
#                 suffix_X, timeout_X]]
#
# Where:
#
#    description: (mandatory) string that describes the status (e.g. "Get power status").
#    behavior   : (mandatory) integer that specifies the behavior for generating the status. It can either be:
#                    - FIXED (sends a fixed value to the client)
#                    - ENUM (sends a value - belonging to an enumeration - to the client)
#                    - INCR (sends an incremented value to the client)
#                    - RANDOM (sends a random value to the client)
#                    - CUSTOM (sends a custom value to the client)
#    value      : (mandatory) value to send to the client. Depending on the behavior, it can either be an integer,
#                 string or list:
#                    - when FIXED, the value is an integer or string. Independently of how many times it is sent to the
#                      client, the value remains the same (i.e. does not change).
#                    - when ENUM, the value is a list. It represents a set of elements (enumeration). After sending an
#                      element of the list to the client, the next value to be sent is the next element in the list.
#                      When the last element is sent, the next to be sent is the the first element of the list.
#                    - when INCR, the value is an integer or list. If an integer, then the first value to be sent is a
#                      0 and subsequent values to be sent are incremented by value. If a list, then the lower bound,
#                      upper bound and increment values are defined by the first, second and third elements of the
#                      list, respectively.
#                    - when RANDOM, the value is an integer or a list. If an integer, then a random number between 0
#                      and value is generated. If a list, then the lower and upper bounds of the random number to
#                      generate are defined by the first and second elements of the list, respectively. The generated
#                      random number is sent to the client.
#                    - when CUSTOM, the value is a string. It contains the name of an user-defined Python function to
#                      be called by Kameleon. The returned value of this function is sent to the client.
#    prefix     : (optional) string that contains the prefix to insert at the beginning of the value to send to the
#                 client. If not specified, then nothing is inserted.
#    suffix     : (optional) string that contains the suffix to insert at the end of the value to send to the client.
#                 If not specified, then nothing is inserted.
#    timeout    : (optional) integer that specifies the time-out (in milliseconds) after which the status is sent to
#                 the client (i.e. time-based). If set to 0 or not specified, then the status is only sent after
#                 receiving a command from the client (i.e. event-based).
STATUSES = [["Reset", CUSTOM, "reset()"]
           ,["Set power status OFF", CUSTOM, "set_off()"]
           ,["Set power status ON", CUSTOM, "set_on()"]
           ,["Get power status", CUSTOM, "get_status()"]
           ,["Get current", CUSTOM, "get_current()"]
           ,["Measure current", CUSTOM, "meas_current()"]
           ,["Set current", CUSTOM, "set_current()"]
           ,["Get voltage", CUSTOM, "get_voltage()"]
           ,["Measure voltage", CUSTOM, "meas_voltage()"]
           ,["Set voltage", CUSTOM, "set_voltage()"]
           ,["Get serial number", CUSTOM, "get_idn()"]
           ,["Set ramp status", CUSTOM, "set_ramp_status()"]
           ,["Get ramp", CUSTOM, "get_ramp()"]
           ,["Set ramp value", CUSTOM, "set_ramp_val()"]
           ,["Get statusbyte", CUSTOM, "get_statusbyte()"]
           ]

# User-custom Python code

# Constants
vmax = 100000 # 100kV
imax = 0.15 # 150mA

# Global variables
power = 0
current = 0
voltage = 0
idn = "012345678901234567890123456789012345678"

# Support functions

def check_voltage(v):
    if (v > vmax): return vmax
    if (v < 0.0): return 0
    return v

def check_current(i):
    if (i > imax): return imax
    if (i < 0.0): return 0
    return i

# Hardware command treatment functions

def reset():
    global power
    global current
    global voltage
    power = 0
    current = 0
    voltage = 0

def set_off():
    global power
    power = 0
    return "E0"

def set_on():
    global power
    power = 1
    return "E0"

def get_status():
    return "BON:%d" %(int(power))

def set_current():
    global current
    args = COMMAND_RECEIVED.split()
    if len(args) > 1:
        current = check_current(float(args[1]))
        return "E0"
    return "E1"

def get_current():
    return "S1:%.3f" %(current)

def meas_current():
    return "M1:%.3f" %(current)

def set_voltage():
    global voltage
    args = COMMAND_RECEIVED.split()
    if len(args) > 1:
        voltage = check_voltage(float(args[1]))
        return "E0"
    return "E1"

def get_voltage():
    return "S0:%.3f" %(voltage)

def meas_voltage():
    return "M0:%.3f" %(voltage)

def get_idn():
    return str(idn)

def set_ramp_status():
    return "E0"

def get_ramp():
    return "S0S:0.0e3"

def set_ramp_val():
    return "E0"

def get_statusbyte():
    # Incomplete: must be checked with the power supply.
    statusbyte = int(0)
    statusbyte = statusbyte|(power << 5)
    return "KS:%d" %(statusbyte)
