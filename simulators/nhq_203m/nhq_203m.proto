# author: Ricardo Fernandes
# email: ricardo.fernandes@esss.se
# copyright: (C) 2015-2016 European Spallation Source (ESS)
# version: 1.0.2
# date: 2016/OCT/13
# description: File that describes the EPICS streamDevice protocol for the example simulator.



Terminator = CR LF;


#Read module identifier:
ReadModule
{
   out "\#";
   in "\#";
   in "%f;%(\$1)f;%(\$2)f;%(\$3)f";
}


#Read and write break time:
ReadW
{
   out "W";
   in "W";
   in "%d";
}

WriteW
{
   out "W=%d";
   in "W=%d";
   in "";
   @init {ReadW;}
}


#Read actual voltage:
ReadU
{
   out "U\$1";
   in "U\$1";
   in "%f";
}


#Read actual current:
ReadI
{
   out "I\$1";
   in "I\$1";
   in "%f";	#Shold look like %fE%d, where E is 2^
}


#Read voltage limit:
ReadM
{
   out "M\$1";
   in "M\$1";
   in "%d";
}


#Read current limit:
ReadN
{
   out "N\$1";
   in "N\$1";
   in "%d";
}


#Read and write set voltage:
ReadD
{
   out "D\$1";
   in "D\$1";
   in "%d";
}

WriteD
{
   out "D\$1=%d";
   in "D\$1=%d";
   in "";
   @init {
      out "D\$1";
      in "D\$1";
      in "%d";
   }
}


#Read and write ramp speed:
ReadV
{
   out "V\$1";
   in "V\$1";
   in "%d";
}

WriteV
{
   out "V\$1=%d";
   in "V\$1=%d";
   in "";
   @init {
      out "V\$1";
      in "V\$1";
      in "%d";
   }
}


#Start voltage change:
StartG
{
   out "G\$1";
   in "%s";
}


#Read and write current trip:
ReadL
{
   out "L\$1";
   in "L\$1";
   in "%f";
}

WriteL
{
   out "L\$1=%d";
   in "L\$1=%d";
   in "";
   @init {
      out "L\$1";
      in "L\$1";
      in "%f";
   }
}


#Read status word:
ReadS
{
   out "S\$1";
   in "S\$1";
   in "%#s";
}


#Read module status:
ReadT
{
   out "T\$1";
   in "T\$1";
   in "%d";
}


#Read and write auto start:
ReadA
{
   out "A\$1";
   in "A\$1";
   in "%d";
}

WriteA
{
   out "A\$1=%d";
   in "A\$1=%d";
   in "";
   @init {
      out "A\$1";
      in "A\$1";
      in "%d";
   }
}
