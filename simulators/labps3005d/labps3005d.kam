# author: IÃ±igo Alonso
# email: inigo.alonso@esss.se
# copyright: (C) 2017 European Spallation Source ERIC
# version: 1.0.0
# date: 2017/03/23
# description: Kameleon file for the Velleman LABPS3005D power supply


# The terminator (EOL) of commands/statuses is described in the "TERMINATOR" variable. By default, the terminator is not defined (i.e. empty). If defined, the terminator is inserted at the end of both the commands and statuses received/sent from/to clients before Kameleon starts to process these. The generic form of this variable is:
#
#    TERMINATOR = value
#
# Where value can either be an arbitrary string (e.g. "END") or one of the following pre-defined terminators:
#
#    LF     : the terminator is a line feed (0xA).
#    CR     : the terminator is a carriage return (0xD).
#    LF + CR: the terminator is a line feed (0xA) followed by a carriage return (0xD).
#    CR + LF: the terminator is a carriage return (0xD) followed by a line feed (0xA).
#
# In case there is the need to setup different terminators for commands and statuses, the "TERMINATOR_CMD" and "TERMINATOR_STS" variables can be used respectively (e.g. TERMINATOR_CMD = LF).

TERMINATOR = ""


# Data (i.e. commands) received from the client are described in the "COMMANDS" list. The generic form of this list is:
#
#    COMMANDS = [[description_1, command_1, status_1, wait_1], [description_2, command_2, status_2, wait_2], ..., [description_X, command_X, status_X, wait_X]]
#
# Where:
#
#    description: (mandatory) string that describes the command (e.g. "Turn power on").
#    command    : (mandatory) string that represents the command (e.g. "AC1"). Only data (received from the client) that matches exactly the command is selected. Additional matching policies are available:
#                    - if command starts with "***", then any data (received from the client) that ends with command is selected.
#                    - if command ends with "***", then any data (received from the client) that starts with command is selected.
#                    - if command starts and ends with "***", then any data (received from the client) that contains the command is selected.
#    status     : (optional) integer or list that specifies the index(es) of the status(es) (stored in the "STATUSES" list) to send to the client after the command is selected. The first status (stored in "STATUSES" list) is at index 1. If set to 0 or not specified, then no status is sent.
#    wait       : (optional) integer that specifies the time to wait (in milliseconds) before sending the status to the client. If set to 0 or not specified, then the status is immediately sent (i.e. right after the command is received).

COMMANDS = [["Get Identification (Manufacturer, Model)", "*IDN?",     1,  0],
            ["Get PS status",                            "STATUS?",   2,  0],
            ["Set Beep status",                          "BEEP***",   3,  0],
            ["Set Output status",                        "OUT***",    4,  0],
            ["Set OCP (Over Current Protection) status", "OCP***",    5,  0],
            ["Set OVP (Over Voltage Protection) status", "OVP***",    6,  0],
            ["Get Current setpoint for channel 1",       "ISET1?",    7,  0],
            ["Get Voltage setpoint for channel 1",       "VSET1?",    8,  0],
            ["Set Current setpoint for channel 1",       "ISET1:***", 9,  0],
            ["Set Voltage setpoint for channel 1",       "VSET1:***", 10, 0],
            ["Get Current output for channel 1",         "IOUT1?",    11, 0],
            ["Get Voltage output for channel 1",         "VOUT1?",    12, 0],
            ["Get Memorized Setpoint",                   "RCL***",    13, 0],
            ["Set Setpoint to Memory",                   "SAV***",    14, 0]]


# Data (i.e. statuses) sent to the client are described in the "STATUSES" list. The generic form of this list is:
#
#    STATUSES = [[description_1, behavior_1, value_1, prefix_1, suffix_1, timeout_1], [description_2, behavior_2, value_2, prefix_2, suffix_2, timeout_2]], ..., [description_X, behavior_X, value_X, prefix_X, suffix_X, timeout_X]]
#
# Where:
#
#    description: (mandatory) string that describes the status (e.g. "Get power status").
#    behavior   : (mandatory) integer that specifies the behavior for generating the status. It can either be:
#                    - FIXED (sends a fixed value to the client)
#                    - ENUM (sends a value - belonging to an enumeration - to the client)
#                    - INCR (sends an incremented value to the client)
#                    - RANDOM (sends a random value to the client)
#                    - CUSTOM (sends a custom value to the client)
#    value      : (mandatory) value to send to the client. Depending on the behavior, it can either be an integer, float, string or list:
#                    - when FIXED, the value is expected to be an integer, float or string. Independently of how many times it is sent to the client, the value remains the same (i.e. does not change).
#                    - when ENUM, the value is expected to be a list. It represents a set of elements (enumeration). After sending an element of the list to the client, the next value to be sent is the next element in the list. When the last element is sent, the next to be sent is the the first element of the list.
#                    - when INCR, the value is expected to be an integer, float or list. If an integer, then the first value to be sent is a 0 and subsequent values to be sent are incremented by value. If a list, then the lower bound, upper bound and increment values are defined by the first, second and third elements of the list, respectively.
#                    - when RANDOM, the value is expected to be an integer or a list. If an integer, then a random number between 0 and value is generated. If a list, then the lower and upper bounds of the random number to generate are defined by the first and second elements of the list, respectively. The generated random number is sent to the client.
#                    - when CUSTOM, the value is expected to be a string. It contains the name of an user-defined Python function to be called by Kameleon. The returned value of this function is sent to the client.
#    prefix     : (optional) string that contains the prefix to insert at the beginning of the value to send to the client. If not specified, then nothing is inserted.
#    suffix     : (optional) string that contains the suffix to insert at the end of the value to send to the client. If not specified, then nothing is inserted.
#    timeout    : (optional) integer that specifies the time-out (in milliseconds) after which the status is sent to the client (i.e. time-based). If set to 0 or not specified, then the status is only sent after receiving a command from the client (i.e. event-based).

STATUSES = [["Get IDN",                CUSTOM, "get_IDN()"],
            ["Get PS status",          CUSTOM, "get_PS()"],
            ["Set BEEP status",        CUSTOM, "set_BEEP()"],
            ["Set OUT status",         CUSTOM, "set_OUT()"],
            ["Set OCP status",         CUSTOM, "set_OCP()"],
            ["Set OVP status",         CUSTOM, "set_OVP()"],
            ["Get CH1_I",              CUSTOM, "get_CH1_I()"],
            ["Get CH1_V",              CUSTOM, "get_CH1_V()"],
            ["Set CH1_I",              CUSTOM, "set_CH1_I()"],
            ["Set CH1_V",              CUSTOM, "set_CH1_V()"],
            ["Get OUT1_I",             CUSTOM, "get_OUT1_I()"],
            ["Get OUT1_V",             CUSTOM, "get_OUT1_V()"],
            ["Get MEM point",          CUSTOM, "get_MEM()"],
            ["Set MEM point",          CUSTOM, "set_MEM()"]
            ]

# User-custom Python code

# Additional info on the device at: http://sigrok.org/wiki/Velleman_LABPS3005D

# Identifier
IDN = "LABPS3005D Simulator"

# Power Supply status
# Contents 8 bits in the following format
PS_status = [1,  # 0 CH1: 0=CC mode, 1=CV mode
             0,  # 1 CH2: 0=CC mode, 1=CV mode
             0,  # 2,3 Tracking: 00=Independent, 01=Tracking series,
             0,                # 11=Tracking parallel
             1,  # 4 Beep: 0=Off, 1=On
             0,  # 5 Lock: 0=Lock, 1=Unlock
             0,  # 6 Output: 0=Off, 1=On
             0   # 7 N/A: N/A
             ]

# Beep status
BEEP_status = 1
# Output status
OUT_status = 0

# Over Current Protection status
OCP_status = 0
# Over Voltage Protection status
OVP_status = 0

# Channel 1 Current setpoint
CH1_I = 0.000
# Channel 1 Voltage setpoint
CH1_V = 0.00

# Channel 1 Current output
OUT1_I = 0.000
# Channel 1 Voltage output
OUT1_V = 0.00

# OCP Current limit
OCP_I = 0.000
# OVP Voltage limit
OVP_V = 0.00

# Constant Currrent Mode status
CCM_status = 0
# Constant Voltage Mode status
CVM_status = 0

# Memory
MEM = {'1': {'I': 1.000, 'V': 3.30},
       '2': {'I': 2.000, 'V': 5.00},
       '3': {'I': 3.000, 'V': 10.00},
       '4': {'I': 4.000, 'V': 20.00},
       '5': {'I': 5.000, 'V': 30.00},
       }


def get_IDN():
    global IDN
    return IDN


def get_PS():
    global PS_status
    status = ''.join(map(str, PS_status))
    return int(status, 2)


def set_BEEP():
    global BEEP_status
    global PS_status
    # variable COMMAND_RECEIVED contains the data received from the client
    # (this variable is managed by Kameleon)
    new_status = COMMAND_RECEIVED[4]
    if BEEP_status == new_status:
        pass
    else:
        BEEP_status = new_status
        PS_status[4] = BEEP_status
    return ''


def set_OUT():
    global OUT_status
    global PS_status
    # variable COMMAND_RECEIVED contains the data received from the client
    # (this variable is managed by Kameleon)
    new_status = COMMAND_RECEIVED[3]
    if OUT_status == new_status:
        pass
    else:
        OUT_status = new_status
        PS_status[6] = OUT_status
    return ''


def set_OCP():
    global OCP_status
    global PS_status
    # variable COMMAND_RECEIVED contains the data received from the client
    # (this variable is managed by Kameleon)
    new_status = COMMAND_RECEIVED[3]
    if OCP_status == new_status:
        pass
    else:
        OCP_status = new_status
        PS_status[5] = OCP_status
    return ''


def set_OVP():
    global OVP_status
    # variable COMMAND_RECEIVED contains the data received from the client
    # (this variable is managed by Kameleon)
    new_status = COMMAND_RECEIVED[3]
    if OVP_status == new_status:
        pass
    else:
        OVP_status = new_status
    return ''


def get_CH1_I():
    global CH1_I
    return CH1_I


def get_CH1_V():
    global CH1_V
    return CH1_V


def set_CH1_I():
    global CH1_I
    global CCM_status
    global CVM_status
    global PS_status
    # variable COMMAND_RECEIVED contains the data received from the client
    # (this variable is managed by Kameleon)
    new_value = float(COMMAND_RECEIVED[6:11])
    CH1_I = new_value
    CCM_status = 1
    CVM_status = 0
    PS_status[0] = 0
    return ''


def set_CH1_V():
    global CH1_V
    global CCM_status
    global CVM_status
    global PS_status
    # variable COMMAND_RECEIVED contains the data received from the client
    # (this variable is managed by Kameleon)
    new_value = float(COMMAND_RECEIVED[6:11])
    CH1_V = new_value
    CCM_status = 0
    CVM_status = 1
    PS_status[0] = 1
    return ''


def get_OUT1_I():
    global OUT1_I
    return OUT1_I


def get_OUT1_V():
    global OUT1_V
    return OUT1_V


def get_MEM():
    global MEM
    global CH1_I
    global CH1_V
    # variable COMMAND_RECEIVED contains the data received from the client
    # (this variable is managed by Kameleon)
    mem_pos = COMMAND_RECEIVED[3]
    CH1_I = MEM[mem_pos]['I']
    CH1_V = MEM[mem_pos]['V']
    return ''


def set_MEM():
    global MEM
    global CH1_I
    global CH1_V
    # variable COMMAND_RECEIVED contains the data received from the client
    # (this variable is managed by Kameleon)
    mem_pos = COMMAND_RECEIVED[3]
    MEM[mem_pos]['I'] = CH1_I
    MEM[mem_pos]['V'] = CH1_V
    return ''
