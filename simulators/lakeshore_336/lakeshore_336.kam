# author: Iker Gonzalez Santamaria, Anders Pettersson, Erik Dahlb√§ck
# email: iker.gonzalezsantamaria@esss.se
# copyright: (C) 2016 European Spallation Source (ESS)
# version: 1.0.4
# date: 2016/FEB/17
# description: File that describes the Lake Shore 336 Temperature Controller commands/statuses that the tool Kameleon receives/sends from/to clients through the TCP/IP protocol.

# The terminator (EOL) of commands/statuses is described in the "TERMINATOR" variable. By default, the terminator is empty. If defined, the terminator is inserted at the end of the commands/statuses received/sent from/to clients before Kameleon starts to process these. The generic form of this variable is:
#
#    TERMINATOR = value
#
# Where value can either be an arbitrary string (e.g. "END") or one of the following pre-defined terminators:
#
#    LF     : the terminator is a line feed (0xA).
#    CR     : the terminator is a carriage return (0xD).
#    LF + CR: the terminator is a line feed (0xA) followed by a carriage return (0xD).
#    CR + LF: the terminator is a carriage return (0xD) followed by a line feed (0xA).

TERMINATOR_CMD = CR + LF
TERMINATOR_STS = CR + LF



# Data (i.e. commands) received from the client are described in the "COMMANDS" list. The generic form of this list is:
#
#    COMMANDS = [[description_1, command_1, status_1, wait_1], [description_2, command_2, status_2, wait_2], ..., [description_X, command_X, status_X, wait_X]]
#
# Where:
#
#    description: (mandatory) string that describes the command (e.g. "Turn power on").
#    command    : (mandatory) string that represents the command (e.g. "AC1"). Only data (received from the client) that matches exactly the command is selected. Additional matching policies are available:
#                    - if command starts with "***", then any data (received from the client) that ends with command is selected.
#                    - if command ends with "***", then any data (received from the client) that starts with command is selected.
#                    - if command starts and ends with "***", then any data (received from the client) that contains the command is selected.
#    status     : (optional) integer or list that specifies the index(es) of the status(es) (stored in the "STATUSES" list) to send to the client after the command is selected. The first status (stored in "STATUSES" list) is at index 1. If set to 0 or not specified, then no status is sent.
#    wait       : (optional) integer that specifies the time to wait (in milliseconds) before sending the status to the client. If set to 0 or not specified, then the status is immediately sent (i.e. right after the command is received).

COMMANDS = [["Identification",                             "*IDN?",          1],
            ["celsius query",                              "CRDG?***",       2],
            ["kelvin query",                               "KRDG?***",       3],
            ["setpoint query",                             "SETP?***",       4],
            ["setpoint",                                   "SETP ***",       5],#Added space to not mix with SETP?***!!
            ["range query",                                "RANGE?***",      6],
            ["range",                                      "RANGE ***",      7],
            ["nameA query",                                "INNAME? ***",    8],
            ["nameB query",                                "INB?",           9],
            ["nameA",                                      "INNAME ***",    10],
            ["nameB",                                      "IN_B***",       11],
            ["PID query",                                  "PID?***",       12],
            ["PID",                                        "PID ***",       13],
            ["limit query",                                "TLIMIT?***",    14],
            ["limit",                                      "TLIMIT_***",    15],
            ["output mode query",                          "OUTMODE?***",   16],#Stub
            ["output mode",                                "OUTMODE ***",   17],#Stub
            ["sensor units input reading query",           "SRDG?***",      18],#Stub
            ["sensor input name command",                  "INNAME ***",    19],#Stub
            ["control setpoint ramp status query",         "RAMPST?***",    20],#Stub
            ["control setpoint ramp parameter cmd",        "RAMP ***",      21],#Stub
            ["control setpoint ramp parameter query",      "RAMP?***",      22],#Stub
            ["manual output cmd",                          "MOUT ***",      23],#Stub
            ["output manual heater power output query",    "MOUT?***",      24],#Stub
            ["control loop zone table parameter cmd",      "ZONE ***",      25],#Stub
            ["output zone table parameter query",          "ZONE?***",      26] #Stub
            ]

## TODOs missing commands ##
# TUNEST?
# AOUT?
# AOUT?
# HTR?



# Data (i.e. statuses) sent to the client are described in the "STATUSES" list. The generic form of this list is:
#
#    STATUSES = [[description_1, behavior_1, value_1, prefix_1, suffix_1, timeout_1], [description_2, behavior_2, value_2, prefix_2, suffix_2, timeout_2]], ..., [description_X, behavior_X, value_X, prefix_X, suffix_X, timeout_X]]
#
# Where:
#
#    description: (mandatory) string that describes the status (e.g. "Get power status").
#    behavior   : (mandatory) integer that specifies the behavior for generating the status. It can either be:
#                    - FIXED (sends a fixed value to the client)
#                    - ENUM (sends a value - belonging to an enumeration - to the client)
#                    - INCR (sends an incremented value to the client)
#                    - RANDOM (sends a random value to the client)
#                    - CUSTOM (sends a custom value to the client)
#    value      : (mandatory) value to send to the client. Depending on the behavior, it can either be an integer, float, string or list:
#                    - when FIXED, the value is expected to be an integer, float or string. Independently of how many times it is sent to the client, the value remains the same (i.e. does not change).
#                    - when ENUM, the value is expected to be a list. It represents a set of elements (enumeration). After sending an element of the list to the client, the next value to be sent is the next element in the list. When the last element is sent, the next to be sent is the the first element of the list.
#                    - when INCR, the value is expected to be an integer, float or list. If an integer, then the first value to be sent is a 0 and subsequent values to be sent are incremented by value. If a list, then the lower bound, upper bound and increment values are defined by the first, second and third elements of the list, respectively.
#                    - when RANDOM, the value is expected to be an integer or a list. If an integer, then a random number between 0 and value is generated. If a list, then the lower and upper bounds of the random number to generate are defined by the first and second elements of the list, respectively. The generated random number is sent to the client.
#                    - when CUSTOM, the value is expected to be a string. It contains the name of an user-defined Python function to be called by Kameleon. The returned value of this function is sent to the client.
#    prefix     : (optional) string that contains the prefix to insert at the beginning of the value to send to the client. If not specified, then nothing is inserted.
#    suffix     : (optional) string that contains the suffix to insert at the end of the value to send to the client. If not specified, then nothing is inserted.
#    timeout    : (optional) integer that specifies the time-out (in milliseconds) after which the status is sent to the client (i.e. time-based). If set to 0 or not specified, then the status is only sent after receiving a command from the client (i.e. event-based).

STATUSES = [["Identification", FIXED, "LSCI,MODEL336,336AB9U/306A0E5,2.5"],
            ["celsius query",                           CUSTOM, "tem_celsius(1)"],
            ["kelvin query",                            CUSTOM, "tem_celsius(2)"],
            ["setpoint query",                          CUSTOM, "get_setpoint()"],
            ["setpoint",                                CUSTOM, "setpoint()"],
            ["range query",                             CUSTOM, "get_range()"],
            ["range",                                   CUSTOM, "set_range()"],
            ["nameA query",                             CUSTOM, "get_nameA()"],
            ["nameB query",                             CUSTOM, "get_nameB()"],
            ["nameA",                                   CUSTOM, "set_nameA()"],
            ["nameB",                                   CUSTOM, "set_nameB()"],
            ["PID query",                               CUSTOM, "get_PID()"],
            ["PID",                                     CUSTOM, "set_PID()"],
            ["limit query",                             CUSTOM, "get_tlimit()"],
            ["limit",                                   CUSTOM, "set_tlimit()"],
            ["output mode query",                       CUSTOM, "get_outmode()"],#Stub
            ["output mode",                             CUSTOM, "set_outmode()"],#Stub
            ["sensor units input reading query",        CUSTOM, "get_sensor_unit()"],#Stub
            ["sensor input name command",               CUSTOM, "set_sensor_name()"],#Stub
            ["control setpoint ramp status query",      CUSTOM, "get_setpoint_ramp_status()"],#Stub
            ["control setpoint ramp parameter cmd",     CUSTOM, "set_setpoint_ramp_param()"],#Stub
            ["control setpoint ramp parameter query",   CUSTOM, "get_setpoint_ramp_param()"],#Stub
            ["manual output cmd",                       CUSTOM, "set_manual_heater_power()"],#Stub
            ["output manual heater power output query", CUSTOM, "get_manual_heater_power()"],#Stub
            ["control loop zone table parameter cmd",   CUSTOM, "set_zone_table_parameter()"],#Stub
            ["output zone table parameter query",       CUSTOM, "get_zone_table_parameter()"],#Stub
            ]




# User-custom Python code

sA = 320.00      ## setpoint
sB = 310.00      ## setpoint
sC = 330.00      ## setpoint
sD = 380.00      ## setpoint
rA = 0           ## heater/cooler range
rB = 2           ## heater/cooler range
rC = 3           ## heater/cooler range
rD = 0           ## heater/cooler range
myRange=[0,2,3,0]


c = 19.5        ## room temperature
t = 350.00      ## temperature limit
j = 0
k = 0

## Input names
nameA = "inputA"
nameB = "inputB"
nameC = "inputC"
nameD = "inputD"

### P,I,D parameters
P = 100.00
I = 50.00
D = 0.00
###

### Temperature channel A-D
tempA = 20.00
tempB = 20.00
tempC = 20.00
tempD = 20.00
###...and also a Kelvin variable for temp...
tempA_K = 293.00
tempB_K = 293.00
tempC_K = 293.00
tempD_K = 293.00

tillf = 0.0

zero = 0

_QUIET = False

######## FUNCTIONS ###########

# ============================
#  FUNCTION TO PRINT MESSAGE ALONG WITH A TIMESTAMP
# ============================
def  _print_message(message):
	if _QUIET is False:
		now = datetime.datetime.now()
		print("[%02d:%02d:%02d.%03d] %s" % (now.hour, now.minute, now.second, now.microsecond / 1000.0, message))

def my_function():
    #global tillf
    #global tempA
    #tillf = tillf + 0.1
    #tempA = tillf
  # _print_message("in it!!!!") #thi sworks!
    return

def clip(v):
    if (v > t): return t
    if (v < 0.0): return 0
    return v

def clipt(w):
    if (w > 500.00): return 500
    if (w < 0.0): return 0
    return w

## Get channel A-D temperature in Celsius
def tem_celsius(x):
    global c
    global j
    global r
    global k

    global tempA
    global tempB
    global tempC
    global tempD

    global sA
    global sB
    global sC
    global sD

    global rA
    global rB
    global rC
    global rD


    global tempA_K
    global tempB_K
    global tempC_K
    global tempD_K

    global tillf

    args = COMMAND_RECEIVED.split()
    #_print_message(args)

    if len(args)>1:
        if (args[1] == 'A'):
            c = tempA
            k = tempA_K
            r = int(rA)
            s = sA
            #_print_message("its A %s" % args[1])
        elif (args[1] == 'B'):
            c = tempB
            k = tempB_K
            r = int(rB)
            s = sB
        elif (args[1] == 'C'):
            c = tempC
            k = tempC_K
            r = int(rC)
            s = sC
        elif (args[1] == 'D'):
            c = tempD
            k = tempD_K
            r = int(rD)
            s = sD
        else:
        	print_message("its wrong %s" % args[1])
        	return

    ##Vierd Calculation of temperature
    ### Heater/Cooler Switched OFF ###
    ##### The sample temperature will aproximate to the room temperature

    if r == 0:
            #_print_message("in r = 0")
            if (c > 20.1):
                    c = c - random.uniform(0.01,0.04) - (c-20.1)/100

            elif (19.9 < c <= 20.1):
    		        c = c + (random.uniform(0.002,0.02) - random.uniform(0.002,0.02))
            elif (c < 19.9):
                    c = c + random.uniform(0.01,0.04) - (c-19.9)/100


    ### Heater/Cooler in RANGE 1 ###
    ##### In LOW range the heater/cooler has a power of 500W,
    ##### so we can heat/cool the sample ¬±12.983 K from the room temperature, taking into account
    ##### the power needed to reach this temperature and the J/s waste by the environment

    elif r == 1:

    	if (k >= 306.133):
    		c = c - random.uniform(0.01,0.04) - (c-32.983)/100
    	elif (k <= 280.167):
    		c = c + random.uniform(0.01,0.04) - (c-7.017)/100
    	else:

    		if ((s-k) >= 0):
    			if (k < 306.133):
    				c = c + (0.01 + random.uniform(0.001,0.01) + (s-k)/100)
    			else:
    				c = c + (random.uniform(0.002,0.02) - random.uniform(0.002,0.02))

    		elif ((s-k) < 0):
    			if (282.745 < k):
    				c = c - (0.01 + random.uniform(0.001,0.01) + (k-s)/100)
    			else:
    				c = c + (random.uniform(0.002,0.02) - random.uniform(0.002,0.02))


    ### Heater/Cooler in RANGE 2 ###

    ##### In MEDIUM range the heater/cooler has a power of 2500W,
    ##### so we can heat/cool the sample ¬±64.913 K from the room temperature, taking into account
    ##### the power needed to reach this temperature and the J/s waste by the environment

    elif r == 2:

    	if (k >= 357.343):
    		c = c - random.uniform(0.01,0.04) - (c-84.913)/100
    	elif (k <= 228.237):
    		c = c + random.uniform(0.01,0.04) - (c+44.913)/100
    	else:

    		if ((s-k) >= 0):
    			if (k < 357.343):
    				c = c + (0.01 + random.uniform(0.003,0.03) + (s-k)/50)
    			else:
    				c = c + (random.uniform(0.002,0.02) - random.uniform(0.002,0.02))

    		elif ((s-k) < 0):
    			if (228.237 < k):
    				c = c - (0.01 + random.uniform(0.003,0.03) + (k-s)/50)
    			else:
    				c = c + (random.uniform(0.002,0.02) - random.uniform(0.002,0.02))

    ### Heater/Cooler in RANGE 3 ###

    ##### In HIGH range the heater/cooler has a power of 6000W,
    ##### so we can heat/cool the sample ¬±155.792 K from the room temperature, taking into account
    ##### the power needed to reach this temperature and the J/s waste by the environment

    elif r == 3:

    	if ((s-k) >= 0):
    		if (k < 448.942):
    			c = c + (0.01 + random.uniform(0.005,0.05) + (s-k)/25)
    		else:
    			c = c + (random.uniform(0.002,0.02) - random.uniform(0.002,0.02))

    	elif ((s-k) < 0):
    		if (137.358 < k):
    			c = c - (0.01 + random.uniform(0.005,0.05) + (k-s)/25)
    		else:
    			c = c + (random.uniform(0.002,0.02) - random.uniform(0.002,0.02))


    else:
        #_print_message("its wrong %s !!!" % args[1])
        #_print_message("its wrong %d !!!" % int(r))
        return

    ## Finally set the temp
    k = c + 273.150

    if (args[1] == 'A'):
        tempA = c
        tempA_K = k
        #_print_message("its AEND")
    elif (args[1] == 'B'):
        tempB = c
        tempB_K = k
    elif (args[1] == 'C'):
        tempC = c
        tempC_K = k
    elif (args[1] == 'D'):
        tempD = c
        tempD_K = k


    if (x == 1):
           return "%.3f" %(c)

    elif (x == 2):
            return "%.3f" %(k)
    else:
            _print_message("NOOOOOO" )
            return


def tem_kelvin():
    global k
    global c
    global tempA_K
    global tempB_K
    global tempC_K
    global tempD_K

    args = COMMAND_RECEIVED.split()
    _print_message(args)
    if len(args)>1:
        if (args[1] == 'A'):
            c = tempA
            k = tempA_K
            _print_message("its A %s" % args[1])
        elif (args[1] == 'B'):
            c = tempB
            k = tempB_K
            #r = 2
        elif (args[1] == 'C'):
            c = tempC
            k = tempC_K
        elif (args[1] == 'D'):
            c = tempD
            k = tempD_K
        else:
            _print_message("its wrong in KELVIN %s" % args[1])
            return

    #k = c + 273.150
    return "%.3f" %(k)


def get_setpoint():
    global sA
    global sB
    global sC
    global sD
    global tillf

    #_print_message("halooooooooo")
    args = COMMAND_RECEIVED.split()
    #_print_message(args)
    #_print_message("detta 'r det= %s" % args[1])
    if len(args)>1:

        if (args[1] == '1'):
            s = sA
            #s = tillf
        elif (args[1] == '2'):
            s = sB
        elif (args[1] == '3'):
            s = sC
        elif (args[1] == '4'):
            s = sD
        else:
            _print_message("its wrong in GET setpoint %s" % args[1])
            return

    return "%.2f" %(s)

def setpoint():
	global s
	global j

        global sA
        global sB
        global sC
        global sD
        args = COMMAND_RECEIVED.replace(',',' ')

        args = args.split()
        ##args = COMMAND_RECEIVED.split()
        #_print_message(args)
        #_print_message(args[2])
        if len(args)>1:

                if (args[1] == '1'):
                      sA = float(args[2])
		elif (args[1] == '2'):
                      sB = float(args[2])
                elif (args[1] == '3'):
                      sC = float(args[2])
                elif (args[1] == '4'):
                      sD = float(args[2])
	        else:
                      _print_message("its wrong in set setpoint")
                      return
        return


def get_range():

    global rA
    global rB
    global rC
    global rD
    nu = 0

    args = COMMAND_RECEIVED.replace(',',' ')
    args = args.split()
    #_print_message(args)
    if (args[1] == '1'):
        #_print_message(" in 1")
        nu = rA
    elif (args[1] == '2'):
        #_print_message(" in 2")
        nu = rB
        #_print_message(" efter 2")
    elif (args[1] == '3'):
        nu = rC
        #_print_message(" titut 1")
    elif (args[1] == '4'):
        nu = rD
        #_print_message(" titut 2")
    else:
        #_print_message(" titut 3")
        #_print_message("its wrong in GET RANGE %s" % args[1])
        return

    #_print_message(" titut 4")
    #_print_message("n = %d" % int(nu) )
    #_print_message(" just before return")
    return "%d" %(int(nu))

def set_range():
    global rA
    global rB
    global rC
    global rD

    args = COMMAND_RECEIVED.replace(',',' ')
    args = args.split()
    _print_message(args)
    if (args[1] == '1'):
        #_print_message(" in 1")
        rA = args[2]
    elif (args[1] == '2'):
        #_print_message(" in 2")
        rB = args[2]
        #_print_message(" efter 2")
    elif (args[1] == '3'):
        rC = args[2]
        #_print_message(" titut 1")
    elif (args[1] == '4'):
        rD = args[2]
        #_print_message(" titut 2")
    else:
        #_print_message(" titut 3")
        _print_message("its wrong in SET RANGE: %s" % args[1])
        return None
    _print_message(" Returning none bwlow")
    return None


def get_nameA():
    global nameA
    global nameB
    global nameC
    global nameD

    args = COMMAND_RECEIVED.split()
    if len(args)>1:

        if (args[1] == 'A'):
            _print_message(" A!!")
            return "%s" %(nameA)
        elif (args[1] == 'B'):
            _print_message(" B!!")
            return "%s" %(nameB)
        elif (args[1] == 'C'):
            _print_message(" C!!")
            return "%s" %(nameC)
        elif (args[1] == 'D'):
            _print_message(" D!!")
            return "%s" %(nameD)
        else:
            return


def set_nameA():

	global nameA
        global nameB
        global nameC
        global nameD


        args = COMMAND_RECEIVED.replace(',',' ')

        args = args.split()
        ##name = args[2]
        name = (args[2])[1: -1] ##Removing "  "


##        if len(args)>2:
##            _print_message("%s %s %s" % (args[0], args[1], args[2]))
##        if len(args)<3:
##            _print_message("%s %s" % (args[0], args[1]))

	channel = args[1]
        if (channel[0] == 'A'):
               ## _print_message("YES! ")
                _print_message("%s words" % len(args[2]))
		##name = args[2]
                nameA = name ##[1: -1]

        elif (channel[0] == 'B'):
                nameB = name ##args[2]

        elif (channel[0] == 'C'):
                nameC = name ##args[2]

        elif (channel[0] == 'D'):
                nameD = name ##args[2]

        else:
                _print_message(" NOPE")


def get_PID():
    global P
    global I
    global D
    _print_message("%.2f,%.2f,%.2f" %(P,I,D))
    return "%.2f,%.2f,%.2f" %(P,I,D)


def set_PID():

    global P
    global I
    global D
    args = COMMAND_RECEIVED.replace(',',' ')
    args = args.split()
    _print_message(args)
    if len(args)>3:
        P = clip(float(args[2]))
        I = clip(float(args[3]))
        D = clip(float(args[4]))

def get_tlimit():

	return "%.2f" %(t)

def set_tlimit():

	global t

	args = COMMAND_RECEIVED.split()

	if len(args)>1:
		t = clipt(float(args[1]))

def get_outmode():
  #stub
  _print_message("Stub command is called")
  #return "%d,%d,%d" %(int(zero),(int(zero),(int(zero))))
  return "0,0,0"

def set_outmode():
  #stub
  _print_message("Stub command is called")

def get_sensor_unit():
  #stub
  _print_message("Stub command is called")
  return "%.2f" %int(zero)

def set_sensor_name():
  #stub
  _print_message("Stub command is called")

def get_setpoint_ramp_status():
  #stub
  _print_message("Stub command is called")
  return "%.2f" %int(zero)

def set_setpoint_ramp_param():
  #stub
  _print_message("Stub command is called")

def get_setpoint_ramp_param():
  #stub
  _print_message("Stub command is called")
  return "%.2d,%.2d" %(int(zero),int(zero))

def set_manual_heater_power():
  #stub
  _print_message("Stub command is called")

def get_manual_heater_power():
  #stub
  _print_message("Stub command is called")
  return "%.2f" %int(zero)

def set_zone_table_parameter():
  #stub
  _print_message("Stub command is called")

def get_zone_table_parameter():
  #stub
  _print_message("Stub command is called")
  return "%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f" %(int(zero),int(zero),int(zero),int(zero),int(zero),int(zero),int(zero),int(zero))
